create database project;
use project;
-- 1. Supplier Table
CREATE TABLE IF NOT EXISTS supplier (
    sup_id TINYINT PRIMARY KEY,
    sup_name VARCHAR(255),
    address TEXT
);

-- 2. Categories Table
CREATE TABLE IF NOT EXISTS categories (
    cat_id TINYINT PRIMARY KEY,
    cat_name VARCHAR(255)
);
select * from categories;

-- 3. Employees Table
CREATE TABLE IF NOT EXISTS employees (
    emp_id TINYINT PRIMARY KEY,
    emp_name VARCHAR(255),
    hire_date VARCHAR(255)
);

-- 4. Customers Table
CREATE TABLE IF NOT EXISTS customers (
    cust_id SMALLINT PRIMARY KEY,
    cust_name VARCHAR(255),
    address TEXT
);
select * from customers;

-- 5. Products Table
CREATE TABLE IF NOT EXISTS products (
    prod_id TINYINT PRIMARY KEY,
    prod_name VARCHAR(255),
    sup_id TINYINT,
    cat_id TINYINT,
    price DECIMAL(10,2),
    FOREIGN KEY (sup_id) REFERENCES supplier(sup_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (cat_id) REFERENCES categories(cat_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- 6. Orders Table
CREATE TABLE IF NOT EXISTS orders (
    ord_id SMALLINT PRIMARY KEY,
    cust_id SMALLINT,
    emp_id TINYINT,
    order_date VARCHAR(255),
    FOREIGN KEY (cust_id) REFERENCES customers(cust_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (emp_id) REFERENCES employees(emp_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);
select * from orders;

-- 7. Order_Details Table
CREATE TABLE IF NOT EXISTS order_details (
    ord_detID SMALLINT AUTO_INCREMENT PRIMARY KEY,
    ord_id SMALLINT,
    prod_id TINYINT,
    quantity TINYINT,
    each_price DECIMAL(10,2),
    total_price DECIMAL(10,2),
    FOREIGN KEY (ord_id) REFERENCES orders(ord_id)
        ON UPDATE CASCADE ON DELETE CASCADE,
    FOREIGN KEY (prod_id) REFERENCES products(prod_id)
        ON UPDATE CASCADE ON DELETE CASCADE
);

-- All tables
select * from supplier;
select * from categories;
select * from customers;
select * from employees;
select * from order_details;
select * from orders;
select * from products;

-- 1️. Customer Insights
-- How many unique customers have placed orders?
select  
	count(distinct cust_id) as unique_customers 
from orders;

-- Which customers have placed the highest number of orders?
select cust_id,cust_name,
	count(*) as high_order 
	from orders
		inner join
        customers using (cust_id)
        group by cust_id,cust_name
        order by high_order desc;
		
-- What is the total and average purchase value per customer?
select * from customers;
select * from orders;
select cust_id,cust_name,
	sum(total_price) as total_purchase,
    avg(total_price) as avg_price
		from orders
		inner join
        order_details using (ord_id) 
        inner join 
        customers using (cust_id)
        group by cust_id,cust_name;

-- Who are the top 5 customers by total purchase amount?
select cust_id,cust_name,
	sum(total_price) as total_purchase
 from orders
	inner join
 order_details using (ord_id)
	inner join
 customers using (cust_id)
 group by cust_id,cust_name
 order by total_purchase desc limit 5;
 
 
 /*2. Product Performance
Evaluate how well products are performing in terms of sales and revenue.*/
 -- How many products exist in each category?
 select * from products;
 select * from categories;
 select cat_id,cat_name,count(prod_name) as prod_exits
 from products
 left join
categories using (cat_id)
group by cat_id,cat_name
order by prod_exits desc;


-- What is the average price of products by category?
select * from categories;
select * from products;

select cat_id,cat_name,round(avg(price),2) as avg_price
from categories 
inner join 
products using (cat_id)
group by cat_id,cat_name;

-- Which products have the highest total sales volume (by quantity)?
select * from products;
select * from orders;
select * from order_details;

select prod_id , prod_name as product_name,
sum(quantity) as total_qunatity
from order_details
inner join 
products using (prod_id)
group by prod_id , prod_name
order by total_qunatity desc;


-- What is the total revenue generated by each product?
select prod_name,
sum(each_price) as total_revenue
from products
inner join 
order_details using (prod_id)
group by prod_name,prod_id
order by total_revenue desc;


-- How do product sales vary by category and supplier?
select cat_name,sup_name,
sum(total_price) as total_sales
	from order_details
		inner join
	products using (prod_id)
		inner join 
	categories using (cat_id)
		inner join 
	supplier using (sup_id)
    group by sup_id,cat_id,cat_name,sup_name
    order by total_sales desc;
    
/*3. Sales and Order Trends
Analyze business performance through orders and revenue over time.*/
-- a.How many orders have been placed in total?
select * from orders;
select count(ord_id) as total_placed_orders
 from orders;

-- What is the average value per order?
select avg(total_price) as avg_value
from (
	select ord_id,sum(total_price) as total_price
	from orders
    inner join
    order_details using (ord_id)
	group by ord_id) as per_order;
    
    select distinct(ord_id) as orders,
    avg(total_price) as avg_value
    from order_details
    group by orders;
    
-- On which dates were the most orders placed?
select * from orders;
select * from order_details;
select order_date,count(ord_id) as most_orders 
	from orders
    left join
    order_details using (ord_id)
    group by order_date
    order by most_orders desc;
    
    
-- What are the monthly trends in order volume and revenue?
select monthname(str_to_date(order_date, '%m/%d/%Y')) as monthly,
count(quantity) as total_order,
sum(total_price) as total_revenue
from orders
left join order_details
using(ord_id)
group by monthly;


-- How do order patterns vary across weekdays and weekends?
SELECT
 dayname(str_to_date(order_date, '%m/%d/%Y')) AS day_name,  
  CASE 
    WHEN dayname(str_to_date(order_date, '%m/%d/%Y')) in ('Saturday', 'Sunday') then 'Weekend'
    ELSE 'Weekday'
  END AS day_type,
  SUM(total_price) as total_sales
from orders
left join order_details using(ord_id)
group by day_name,day_type
order by total_sales desc;

/*4️. Supplier Contribution
Identify the most active and profitable suppliers.*/
-- How many suppliers are there in the database?
select * from supplier;
select count(sup_id) as total_suppliers 
from supplier;

-- Which supplier provides the most products?
select * from supplier;
select * from products;
select sup_id,sup_name,count(prod_id) as most_orders
from supplier 
left join 
products using (sup_id)
group by sup_id,sup_name
order by most_orders desc ;

-- What is the average price of products from each supplier?
select sup_name,avg(price) as avg_price
from supplier 
left join 
products using (sup_id)
group by sup_name
order by avg_price desc;

-- Which suppliers contribute the most to total product sales (by revenue)?
select sup_name,
		sum(total_price) as total_sales
from supplier 
	left join 
products using (sup_id)
	left join
    order_details using (prod_id)
group by sup_name
order by total_sales desc;

/*5️. Employee Performance
Assess how employees are handling and influencing sales.*/
-- How many employees have processed orders?
select * from employees;
select 
	count(distinct emp_id ) as emp_processed_orders 
	from orders;


-- Which employees have handled the most orders?
select emp_name, count(ord_id) as most_orders
from employees
left join 
orders using (emp_id)
group by emp_name
order by most_orders desc;

-- What is the total sales value processed by each employee?
select emp_name, sum(total_price) as total_sales
from employees
left join 
orders using (emp_id)
left join
order_details using (ord_id)
group by emp_id
order by total_sales desc;

-- What is the average order value handled per employee?
select emp_id,emp_name, avg(total_price) as avg_values
from employees
left join 
orders using (emp_id)
left join
order_details using (ord_id)
group by emp_id,emp_name
order by avg_values desc;

/*6️. Order Details Deep Dive
Explore item-level sales patterns and pricing behavior.*/
-- What is the relationship between quantity ordered and total price?
select sum(quantity) as total_quantity,
	   sum(total_price) as total_price
		 from order_details;

-- What is the average quantity ordered per product?
select prod_name, avg(quantity) as avg_quantity
from order_details 
left join
products using (prod_id)
group by prod_name
order by avg_quantity desc;

-- How does the unit price vary across products and orders?
select prod_name,ord_id,each_price
from products
left join order_details
using(prod_id)
left join orders
using(ord_id)
order by prod_name,ord_id; 
















